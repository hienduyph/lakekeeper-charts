{{/* Checks for `catalog.ingress.path` */}}
{{- if .Values.catalog.ingress.path }}
  {{- if not (.Values.catalog.ingress.path | hasPrefix "/") }}
  {{ required "The `catalog.ingress.path` should start with a '/'!" nil }}
  {{- end }}
  {{- if .Values.catalog.ingress.path | hasSuffix "/" }}
  {{ required "The `catalog.ingress.path` should NOT include a trailing '/'!" nil }}
  {{- end }}
{{- end }}

{{/* Define $webUrl at the top level */}}
{{- $webUrl := "" }}

{{/* If `catalog.config.LAKEKEEPER__BASE_URL` is specified, it takes precedence */}}
{{- if .Values.catalog.config.LAKEKEEPER__BASE_URL }}
  {{- $webUrl = .Values.catalog.config.LAKEKEEPER__BASE_URL }}
{{- else if .Values.catalog.ingress.enabled }}
  {{- $protocol := ternary "https" "http" .Values.catalog.ingress.tls.enabled }}
  {{- $webUrl = printf "%s://%s%s" $protocol .Values.catalog.ingress.host (default "" .Values.catalog.ingress.path) }}
{{- else }}
  {{- $webUrl = printf "http://%s.%s.svc.%s:%d" (include "iceberg-catalog.fullname" .) (.Release.Namespace) (.Values.clusterDomain) (int .Values.catalog.service.externalPort) }}
{{- end }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "iceberg-catalog.fullname" . }}-config-envs
  labels:
    {{- include "iceberg-catalog.labels" . | nindent 4 }}
data:
  # Database Configs
  {{- if .Values.postgresql.enabled }}
  LAKEKEEPER__PG_HOST_R: {{ printf "%s.%s.svc.%s" (include "iceberg-catalog.postgresql.fullname" .) (.Release.Namespace) (.Values.clusterDomain) | b64enc | quote }}
  LAKEKEEPER__PG_HOST_W: {{ printf "%s.%s.svc.%s" (include "iceberg-catalog.postgresql.fullname" .) (.Release.Namespace) (.Values.clusterDomain) | b64enc | quote }}
  LAKEKEEPER__PG_PORT: {{ "5432" | b64enc | quote }}
  {{- else }}
  LAKEKEEPER__PG_HOST_R: {{ .Values.externalDatabase.host_read | toString | b64enc | quote }}
  LAKEKEEPER__PG_HOST_W: {{ .Values.externalDatabase.host_write | toString | b64enc | quote }}
  LAKEKEEPER__PG_PORT: {{ .Values.externalDatabase.port | toString | b64enc | quote }}
  {{- end }}

  {{- if .Values.postgresql.enabled }}
  LAKEKEEPER__PG_DATABASE: {{ .Values.postgresql.auth.database | toString | b64enc | quote }}
  {{- else }}
  LAKEKEEPER__PG_DATABASE: {{ .Values.externalDatabase.database | toString | b64enc | quote }}
  {{- end }}

  {{- if not .Values.postgresql.enabled }}
  {{- if not .Values.externalDatabase.userSecret }}
  LAKEKEEPER__PG_USER: {{ .Values.externalDatabase.user | toString | b64enc | quote }}
  {{- end }}
  {{- if not .Values.externalDatabase.passwordSecret }}
  LAKEKEEPER__PG_PASSWORD: {{ .Values.externalDatabase.password | toString | b64enc | quote }}
  {{- end }}
  {{- end }}

  # Auth Configs
  {{- if .Values.auth.oauth2.provider_uri }}
  LAKEKEEPER__OPENID_PROVIDER_URI: {{ .Values.auth.oauth2.provider_uri | toString | b64enc | quote }}
  {{- if .Values.auth.oauth2.client_id }}
  LAKEKEEPER__OPENID_CLIENT_ID: {{ .Values.auth.oauth2.client_id | toString | b64enc | quote }}
  {{- end }}
  {{- end }}

  LAKEKEEPER__BASE_URI: {{ $webUrl | b64enc | quote }}

  # Secret store configs
  {{- if eq "postgres" (lower .Values.secretBackend.type) }}
  LAKEKEEPER__SECRET_BACKEND: {{ "Postgres" | b64enc | quote }}
  # LAKEKEEPER__PG_ENCRYPTION_KEY is mounted as secret
  {{- end }}
  {{- if eq "kv2" (lower .Values.secretBackend.type) }}
  LAKEKEEPER__KV2__URL: {{ .Values.secretBackend.kv2.url | toString | b64enc | quote }}
  {{- if .Values.secretBackend.kv2.user }}
  LAKEKEEPER__KV2__USER: {{ .Values.secretBackend.kv2.user | toString | b64enc | quote }}
  {{- end }}
  {{- if .Values.secretBackend.kv2.password }}
  LAKEKEEPER__KV2__PASSWORD: {{ .Values.secretBackend.kv2.password | toString | b64enc | quote }}
  {{- end }}
  LAKEKEEPER__KV2__SECRET_MOUNT: {{ .Values.secretBackend.kv2.secret_mount | toString | b64enc | quote }}
  {{- end }}

  # User Configs
  {{- range $k, $v := .Values.catalog.config }}
  {{ $k | quote }}: {{ $v | toString | b64enc | quote }}
  {{- end }}
